{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../cart.service\";\nexport let OrdersummaryComponent = /*#__PURE__*/(() => {\n  class OrdersummaryComponent {\n    //this array will be sent to the node containing product id and stock ordered\n    constructor(cartsrvobj) {\n      this.cartsrvobj = cartsrvobj;\n      this.updateitems = [];\n      this.orderprods = [];\n      this.fetchordernumber();\n    }\n    ngOnInit() {}\n    fetchordernumber() {\n      this.cartsrvobj.fetchorderid(sessionStorage.getItem(\"username\")).subscribe({\n        next: resp => {\n          console.log(resp);\n          this.orderid = resp[0][\"_id\"];\n          this.fetchcart();\n        },\n        error: err => {}\n      });\n    }\n    //fetch order id --> fetch cart --> update stockdb -> add order details to new schema --> empty cart\n    //as soon as we get our order id next task is to update the cart , for that first we will fetch cart details\n    fetchcart() {\n      this.cartsrvobj.fetchcart(sessionStorage.getItem(\"username\")).subscribe({\n        next: resp => {\n          this.cartprods = resp;\n          this.updatestockdb();\n        },\n        error: err => {}\n      });\n    }\n    //following is an efficient way of updating stock details without putting load on server \n    updatestockdb() {\n      for (let x = 0; x < this.cartprods.length; x++) {\n        let updatedata = {\n          pid: this.cartprods[x][\"prodid\"],\n          qty: this.cartprods[x][\"qty\"]\n        };\n        this.updateitems.push(updatedata);\n      }\n      this.cartsrvobj.updatestock(this.updateitems).subscribe({\n        next: () => {\n          this.saveorderitems();\n        },\n        error: () => {}\n      });\n    }\n    saveorderitems() {\n      this.orderprods = [];\n      for (let x = 0; x < this.cartprods.length; x++) {\n        let myprod = {\n          orderid: this.orderid,\n          pid: this.cartprods[x][\"prodid\"],\n          pname: this.cartprods[x][\"prodname\"],\n          prate: this.cartprods[x][\"rate\"],\n          qty: this.cartprods[x][\"qty\"],\n          tc: this.cartprods[x][\"totalcost\"],\n          ppic: this.cartprods[x][\"picture\"],\n          username: sessionStorage.getItem(\"username\")\n        };\n        this.orderprods.push(myprod);\n      }\n      this.cartsrvobj.saveorderprods(this.orderprods).subscribe({\n        next: () => {\n          this.cartdel();\n        },\n        error: () => {}\n      });\n    }\n    cartdel() {\n      this.cartsrvobj.delcart().subscribe({\n        next: resp => {},\n        error: err => {}\n      });\n    }\n  }\n  OrdersummaryComponent.ɵfac = function OrdersummaryComponent_Factory(t) {\n    return new (t || OrdersummaryComponent)(i0.ɵɵdirectiveInject(i1.CartService));\n  };\n  OrdersummaryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OrdersummaryComponent,\n    selectors: [[\"app-ordersummary\"]],\n    decls: 14,\n    vars: 1,\n    consts: [[1, \"breadcrumbs\"], [1, \"container\"], [\"data-wow-delay\", \".5s\", 1, \"breadcrumb\", \"breadcrumb1\", \"animated\", \"wow\", \"slideInLeft\"], [\"href\", \"index.html\"], [\"aria-hidden\", \"true\", 1, \"glyphicon\", \"glyphicon-home\"], [1, \"active\"], [1, \"about\"]],\n    template: function OrdersummaryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"ol\", 2)(3, \"li\")(4, \"a\", 3);\n        i0.ɵɵelement(5, \"span\", 4);\n        i0.ɵɵtext(6, \"Home\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"li\", 5);\n        i0.ɵɵtext(8, \"Order Summary\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(9, \"div\", 6)(10, \"div\", 1);\n        i0.ɵɵtext(11, \" Thanks for shopping on our website.\");\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵtextInterpolate1(\" Your order number is \", ctx.orderid, \" \");\n      }\n    }\n  });\n  return OrdersummaryComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}